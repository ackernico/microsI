
helloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001d8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800039c  080003a4  000103a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  0800039c  0800039c  0001039c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080003a0  080003a0  000103a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000103a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  080003a4  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000001c  080003a4  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000103a4  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000a17  00000000  00000000  000103d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000001f5  00000000  00000000  00010deb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000070  00000000  00000000  00010fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00011050  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000003fb  00000000  00000000  00011098  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000414  00000000  00000000  00011493  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000118a7  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000000ac  00000000  00000000  00011924  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000119d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000384 	.word	0x08000384

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000384 	.word	0x08000384

08000204 <main>:
*ativo em LOW e conectado ao PC0. Utilize o TIM11.
 */
#include "stm32f4xx.h"

int main(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
  RCC->AHB1ENR = 0x87;
 8000208:	4b18      	ldr	r3, [pc, #96]	; (800026c <main+0x68>)
 800020a:	2287      	movs	r2, #135	; 0x87
 800020c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->APB2ENR |= 1 << 18; //Ligar o TIM11
 800020e:	4a17      	ldr	r2, [pc, #92]	; (800026c <main+0x68>)
 8000210:	4b16      	ldr	r3, [pc, #88]	; (800026c <main+0x68>)
 8000212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000218:	6453      	str	r3, [r2, #68]	; 0x44

  GPIOA->MODER |= 0x28000000;
 800021a:	4a15      	ldr	r2, [pc, #84]	; (8000270 <main+0x6c>)
 800021c:	4b14      	ldr	r3, [pc, #80]	; (8000270 <main+0x6c>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
 8000224:	6013      	str	r3, [r2, #0]
  GPIOC->MODER |= 0x01;
 8000226:	4a13      	ldr	r2, [pc, #76]	; (8000274 <main+0x70>)
 8000228:	4b12      	ldr	r3, [pc, #72]	; (8000274 <main+0x70>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f043 0301 	orr.w	r3, r3, #1
 8000230:	6013      	str	r3, [r2, #0]

  TIM11->CR1 = 0x1;
 8000232:	4b11      	ldr	r3, [pc, #68]	; (8000278 <main+0x74>)
 8000234:	2201      	movs	r2, #1
 8000236:	601a      	str	r2, [r3, #0]
  TIM11->ARR = 999;
 8000238:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <main+0x74>)
 800023a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800023e:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM11->PSC = 3199;
 8000240:	4b0d      	ldr	r3, [pc, #52]	; (8000278 <main+0x74>)
 8000242:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000246:	629a      	str	r2, [r3, #40]	; 0x28


	while (1)
  {
	if(TIM11->SR & 0x1){
 8000248:	4b0b      	ldr	r3, [pc, #44]	; (8000278 <main+0x74>)
 800024a:	691b      	ldr	r3, [r3, #16]
 800024c:	f003 0301 	and.w	r3, r3, #1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d0f9      	beq.n	8000248 <main+0x44>
		GPIOC->ODR ^= 0x1;
 8000254:	4a07      	ldr	r2, [pc, #28]	; (8000274 <main+0x70>)
 8000256:	4b07      	ldr	r3, [pc, #28]	; (8000274 <main+0x70>)
 8000258:	695b      	ldr	r3, [r3, #20]
 800025a:	f083 0301 	eor.w	r3, r3, #1
 800025e:	6153      	str	r3, [r2, #20]
		TIM11->SR &= 0x0;
 8000260:	4b05      	ldr	r3, [pc, #20]	; (8000278 <main+0x74>)
 8000262:	691b      	ldr	r3, [r3, #16]
 8000264:	4b04      	ldr	r3, [pc, #16]	; (8000278 <main+0x74>)
 8000266:	2200      	movs	r2, #0
 8000268:	611a      	str	r2, [r3, #16]
	if(TIM11->SR & 0x1){
 800026a:	e7ed      	b.n	8000248 <main+0x44>
 800026c:	40023800 	.word	0x40023800
 8000270:	40020000 	.word	0x40020000
 8000274:	40020800 	.word	0x40020800
 8000278:	40014800 	.word	0x40014800

0800027c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800027c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000280:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000282:	e003      	b.n	800028c <LoopCopyDataInit>

08000284 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000284:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000286:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000288:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800028a:	3104      	adds	r1, #4

0800028c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800028c:	480b      	ldr	r0, [pc, #44]	; (80002bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800028e:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000290:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000292:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000294:	d3f6      	bcc.n	8000284 <CopyDataInit>
  ldr  r2, =_sbss
 8000296:	4a0b      	ldr	r2, [pc, #44]	; (80002c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000298:	e002      	b.n	80002a0 <LoopFillZerobss>

0800029a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800029a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800029c:	f842 3b04 	str.w	r3, [r2], #4

080002a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002a0:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002a4:	d3f9      	bcc.n	800029a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80002a6:	f000 f813 	bl	80002d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002aa:	f000 f847 	bl	800033c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002ae:	f7ff ffa9 	bl	8000204 <main>
  bx  lr    
 80002b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80002b4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80002b8:	080003a4 	.word	0x080003a4
  ldr  r0, =_sdata
 80002bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80002c0:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 80002c4:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 80002c8:	2000001c 	.word	0x2000001c

080002cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002cc:	e7fe      	b.n	80002cc <ADC_IRQHandler>
	...

080002d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002d4:	4a16      	ldr	r2, [pc, #88]	; (8000330 <SystemInit+0x60>)
 80002d6:	4b16      	ldr	r3, [pc, #88]	; (8000330 <SystemInit+0x60>)
 80002d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80002e4:	4a13      	ldr	r2, [pc, #76]	; (8000334 <SystemInit+0x64>)
 80002e6:	4b13      	ldr	r3, [pc, #76]	; (8000334 <SystemInit+0x64>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80002f0:	4b10      	ldr	r3, [pc, #64]	; (8000334 <SystemInit+0x64>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80002f6:	4a0f      	ldr	r2, [pc, #60]	; (8000334 <SystemInit+0x64>)
 80002f8:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <SystemInit+0x64>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000304:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000306:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <SystemInit+0x64>)
 8000308:	4a0b      	ldr	r2, [pc, #44]	; (8000338 <SystemInit+0x68>)
 800030a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800030c:	4a09      	ldr	r2, [pc, #36]	; (8000334 <SystemInit+0x64>)
 800030e:	4b09      	ldr	r3, [pc, #36]	; (8000334 <SystemInit+0x64>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000316:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <SystemInit+0x64>)
 800031a:	2200      	movs	r2, #0
 800031c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800031e:	4b04      	ldr	r3, [pc, #16]	; (8000330 <SystemInit+0x60>)
 8000320:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000324:	609a      	str	r2, [r3, #8]
#endif
}
 8000326:	bf00      	nop
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	e000ed00 	.word	0xe000ed00
 8000334:	40023800 	.word	0x40023800
 8000338:	24003010 	.word	0x24003010

0800033c <__libc_init_array>:
 800033c:	b570      	push	{r4, r5, r6, lr}
 800033e:	4e0d      	ldr	r6, [pc, #52]	; (8000374 <__libc_init_array+0x38>)
 8000340:	4c0d      	ldr	r4, [pc, #52]	; (8000378 <__libc_init_array+0x3c>)
 8000342:	1ba4      	subs	r4, r4, r6
 8000344:	10a4      	asrs	r4, r4, #2
 8000346:	2500      	movs	r5, #0
 8000348:	42a5      	cmp	r5, r4
 800034a:	d109      	bne.n	8000360 <__libc_init_array+0x24>
 800034c:	4e0b      	ldr	r6, [pc, #44]	; (800037c <__libc_init_array+0x40>)
 800034e:	4c0c      	ldr	r4, [pc, #48]	; (8000380 <__libc_init_array+0x44>)
 8000350:	f000 f818 	bl	8000384 <_init>
 8000354:	1ba4      	subs	r4, r4, r6
 8000356:	10a4      	asrs	r4, r4, #2
 8000358:	2500      	movs	r5, #0
 800035a:	42a5      	cmp	r5, r4
 800035c:	d105      	bne.n	800036a <__libc_init_array+0x2e>
 800035e:	bd70      	pop	{r4, r5, r6, pc}
 8000360:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000364:	4798      	blx	r3
 8000366:	3501      	adds	r5, #1
 8000368:	e7ee      	b.n	8000348 <__libc_init_array+0xc>
 800036a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800036e:	4798      	blx	r3
 8000370:	3501      	adds	r5, #1
 8000372:	e7f2      	b.n	800035a <__libc_init_array+0x1e>
 8000374:	0800039c 	.word	0x0800039c
 8000378:	0800039c 	.word	0x0800039c
 800037c:	0800039c 	.word	0x0800039c
 8000380:	080003a0 	.word	0x080003a0

08000384 <_init>:
 8000384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000386:	bf00      	nop
 8000388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038a:	bc08      	pop	{r3}
 800038c:	469e      	mov	lr, r3
 800038e:	4770      	bx	lr

08000390 <_fini>:
 8000390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000392:	bf00      	nop
 8000394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000396:	bc08      	pop	{r3}
 8000398:	469e      	mov	lr, r3
 800039a:	4770      	bx	lr
