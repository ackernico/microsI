
provaAntiga.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000408  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005cc  080005cc  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080005cc  080005cc  000105cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080005d0  080005d0  000105d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000040  20000000  080005d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000034  20000040  08000614  00020040  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000074  08000614  00020074  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000ae1  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000254  00000000  00000000  00020b51  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000080  00000000  00000000  00020da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00020e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000046e  00000000  00000000  00020e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000464  00000000  00000000  000212ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00021752  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000000f8  00000000  00000000  000217d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000218c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000040 	.word	0x20000040
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080005b4 	.word	0x080005b4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000044 	.word	0x20000044
 8000200:	080005b4 	.word	0x080005b4

08000204 <ligaLed>:
			  0b00111111,
			  0b01111111,
		 	  0b11111111
};

void ligaLed(int value){
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	GPIOC->ODR |= led[value];
 800020c:	4907      	ldr	r1, [pc, #28]	; (800022c <ligaLed+0x28>)
 800020e:	4b07      	ldr	r3, [pc, #28]	; (800022c <ligaLed+0x28>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	4807      	ldr	r0, [pc, #28]	; (8000230 <ligaLed+0x2c>)
 8000214:	687a      	ldr	r2, [r7, #4]
 8000216:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800021a:	4313      	orrs	r3, r2
 800021c:	614b      	str	r3, [r1, #20]
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	40020800 	.word	0x40020800
 8000230:	20000000 	.word	0x20000000

08000234 <para>:

void para(){
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
	if(botaoApertado == 1 || !chaveStop){
 8000238:	4b19      	ldr	r3, [pc, #100]	; (80002a0 <para+0x6c>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	2b01      	cmp	r3, #1
 800023e:	d003      	beq.n	8000248 <para+0x14>
 8000240:	4b18      	ldr	r3, [pc, #96]	; (80002a4 <para+0x70>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d125      	bne.n	8000294 <para+0x60>
		botaoApertado = 1;
 8000248:	4b15      	ldr	r3, [pc, #84]	; (80002a0 <para+0x6c>)
 800024a:	2201      	movs	r2, #1
 800024c:	601a      	str	r2, [r3, #0]
		TIM11->CR1 = 0;
 800024e:	4b16      	ldr	r3, [pc, #88]	; (80002a8 <para+0x74>)
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
		while(botaoApertado){
 8000254:	e01a      	b.n	800028c <para+0x58>
			if(TIM10->SR & 0x1 && cont != 0){
 8000256:	4b15      	ldr	r3, [pc, #84]	; (80002ac <para+0x78>)
 8000258:	691b      	ldr	r3, [r3, #16]
 800025a:	f003 0301 	and.w	r3, r3, #1
 800025e:	2b00      	cmp	r3, #0
 8000260:	d014      	beq.n	800028c <para+0x58>
 8000262:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <para+0x7c>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d010      	beq.n	800028c <para+0x58>
				GPIOC->ODR ^= ledP[cont-1];
 800026a:	4912      	ldr	r1, [pc, #72]	; (80002b4 <para+0x80>)
 800026c:	4b11      	ldr	r3, [pc, #68]	; (80002b4 <para+0x80>)
 800026e:	695b      	ldr	r3, [r3, #20]
 8000270:	4a0f      	ldr	r2, [pc, #60]	; (80002b0 <para+0x7c>)
 8000272:	6812      	ldr	r2, [r2, #0]
 8000274:	3a01      	subs	r2, #1
 8000276:	4810      	ldr	r0, [pc, #64]	; (80002b8 <para+0x84>)
 8000278:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800027c:	4053      	eors	r3, r2
 800027e:	614b      	str	r3, [r1, #20]
				TIM10->SR &= ~0x1;
 8000280:	4a0a      	ldr	r2, [pc, #40]	; (80002ac <para+0x78>)
 8000282:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <para+0x78>)
 8000284:	691b      	ldr	r3, [r3, #16]
 8000286:	f023 0301 	bic.w	r3, r3, #1
 800028a:	6113      	str	r3, [r2, #16]
		while(botaoApertado){
 800028c:	4b04      	ldr	r3, [pc, #16]	; (80002a0 <para+0x6c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d1e0      	bne.n	8000256 <para+0x22>
			}
		}
	}
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	2000005c 	.word	0x2000005c
 80002a4:	2000006c 	.word	0x2000006c
 80002a8:	40014800 	.word	0x40014800
 80002ac:	40014400 	.word	0x40014400
 80002b0:	20000064 	.word	0x20000064
 80002b4:	40020800 	.word	0x40020800
 80002b8:	20000020 	.word	0x20000020

080002bc <main>:

int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	RCC->AHB1ENR = 0x87;
 80002c0:	4b6f      	ldr	r3, [pc, #444]	; (8000480 <main+0x1c4>)
 80002c2:	2287      	movs	r2, #135	; 0x87
 80002c4:	631a      	str	r2, [r3, #48]	; 0x30
	RCC->APB2ENR |= 1 << 17;
 80002c6:	4a6e      	ldr	r2, [pc, #440]	; (8000480 <main+0x1c4>)
 80002c8:	4b6d      	ldr	r3, [pc, #436]	; (8000480 <main+0x1c4>)
 80002ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d0:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB2ENR |= 1 << 18;
 80002d2:	4a6b      	ldr	r2, [pc, #428]	; (8000480 <main+0x1c4>)
 80002d4:	4b6a      	ldr	r3, [pc, #424]	; (8000480 <main+0x1c4>)
 80002d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002dc:	6453      	str	r3, [r2, #68]	; 0x44

	GPIOA->MODER |= 0x28000000;
 80002de:	4a69      	ldr	r2, [pc, #420]	; (8000484 <main+0x1c8>)
 80002e0:	4b68      	ldr	r3, [pc, #416]	; (8000484 <main+0x1c8>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
 80002e8:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 0b0101010101010101;
 80002ea:	4a67      	ldr	r2, [pc, #412]	; (8000488 <main+0x1cc>)
 80002ec:	4b66      	ldr	r3, [pc, #408]	; (8000488 <main+0x1cc>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80002f4:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80002f8:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~0b1010;
 80002fa:	4a64      	ldr	r2, [pc, #400]	; (800048c <main+0x1d0>)
 80002fc:	4b63      	ldr	r3, [pc, #396]	; (800048c <main+0x1d0>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f023 030a 	bic.w	r3, r3, #10
 8000304:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x400;
 8000306:	4a5f      	ldr	r2, [pc, #380]	; (8000484 <main+0x1c8>)
 8000308:	4b5e      	ldr	r3, [pc, #376]	; (8000484 <main+0x1c8>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000310:	6013      	str	r3, [r2, #0]

	GPIOB->PUPDR |= 0b0101;
 8000312:	4a5e      	ldr	r2, [pc, #376]	; (800048c <main+0x1d0>)
 8000314:	4b5d      	ldr	r3, [pc, #372]	; (800048c <main+0x1d0>)
 8000316:	68db      	ldr	r3, [r3, #12]
 8000318:	f043 0305 	orr.w	r3, r3, #5
 800031c:	60d3      	str	r3, [r2, #12]

	TIM11->CR1 |= 0b1;
 800031e:	4a5c      	ldr	r2, [pc, #368]	; (8000490 <main+0x1d4>)
 8000320:	4b5b      	ldr	r3, [pc, #364]	; (8000490 <main+0x1d4>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	6013      	str	r3, [r2, #0]
	TIM11->ARR = 999;
 800032a:	4b59      	ldr	r3, [pc, #356]	; (8000490 <main+0x1d4>)
 800032c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000330:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM11->PSC = 15999;
 8000332:	4b57      	ldr	r3, [pc, #348]	; (8000490 <main+0x1d4>)
 8000334:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000338:	629a      	str	r2, [r3, #40]	; 0x28

	TIM10->CR1 = 0b1;
 800033a:	4b56      	ldr	r3, [pc, #344]	; (8000494 <main+0x1d8>)
 800033c:	2201      	movs	r2, #1
 800033e:	601a      	str	r2, [r3, #0]
	TIM10->ARR = 999;
 8000340:	4b54      	ldr	r3, [pc, #336]	; (8000494 <main+0x1d8>)
 8000342:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000346:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM10->PSC = 5332;
 8000348:	4b52      	ldr	r3, [pc, #328]	; (8000494 <main+0x1d8>)
 800034a:	f241 42d4 	movw	r2, #5332	; 0x14d4
 800034e:	629a      	str	r2, [r3, #40]	; 0x28

  while (1)
  {
	chaveStart = GPIOB->IDR & 0b10;
 8000350:	4b4e      	ldr	r3, [pc, #312]	; (800048c <main+0x1d0>)
 8000352:	691b      	ldr	r3, [r3, #16]
 8000354:	f003 0302 	and.w	r3, r3, #2
 8000358:	4a4f      	ldr	r2, [pc, #316]	; (8000498 <main+0x1dc>)
 800035a:	6013      	str	r3, [r2, #0]
	chaveStop  = GPIOB->IDR & 0b01;
 800035c:	4b4b      	ldr	r3, [pc, #300]	; (800048c <main+0x1d0>)
 800035e:	691b      	ldr	r3, [r3, #16]
 8000360:	f003 0301 	and.w	r3, r3, #1
 8000364:	4a4d      	ldr	r2, [pc, #308]	; (800049c <main+0x1e0>)
 8000366:	6013      	str	r3, [r2, #0]

		if(!chaveStart || contando == 1){
 8000368:	4b4b      	ldr	r3, [pc, #300]	; (8000498 <main+0x1dc>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d003      	beq.n	8000378 <main+0xbc>
 8000370:	4b4b      	ldr	r3, [pc, #300]	; (80004a0 <main+0x1e4>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b01      	cmp	r3, #1
 8000376:	d167      	bne.n	8000448 <main+0x18c>
				contando = 1;
 8000378:	4b49      	ldr	r3, [pc, #292]	; (80004a0 <main+0x1e4>)
 800037a:	2201      	movs	r2, #1
 800037c:	601a      	str	r2, [r3, #0]

				if(verif == 1){
 800037e:	4b49      	ldr	r3, [pc, #292]	; (80004a4 <main+0x1e8>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	2b01      	cmp	r3, #1
 8000384:	d107      	bne.n	8000396 <main+0xda>
					GPIOC->ODR &= 0b0;
 8000386:	4b40      	ldr	r3, [pc, #256]	; (8000488 <main+0x1cc>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4b3f      	ldr	r3, [pc, #252]	; (8000488 <main+0x1cc>)
 800038c:	2200      	movs	r2, #0
 800038e:	615a      	str	r2, [r3, #20]
					verif = 0;
 8000390:	4b44      	ldr	r3, [pc, #272]	; (80004a4 <main+0x1e8>)
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
				}

				TIM11->PSC = 10665;
 8000396:	4b3e      	ldr	r3, [pc, #248]	; (8000490 <main+0x1d4>)
 8000398:	f642 12a9 	movw	r2, #10665	; 0x29a9
 800039c:	629a      	str	r2, [r3, #40]	; 0x28
				para();
 800039e:	f7ff ff49 	bl	8000234 <para>

					if(TIM11->SR & 0x1){
 80003a2:	4b3b      	ldr	r3, [pc, #236]	; (8000490 <main+0x1d4>)
 80003a4:	691b      	ldr	r3, [r3, #16]
 80003a6:	f003 0301 	and.w	r3, r3, #1
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d067      	beq.n	800047e <main+0x1c2>
						cont++;
 80003ae:	4b3e      	ldr	r3, [pc, #248]	; (80004a8 <main+0x1ec>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	3301      	adds	r3, #1
 80003b4:	4a3c      	ldr	r2, [pc, #240]	; (80004a8 <main+0x1ec>)
 80003b6:	6013      	str	r3, [r2, #0]
						switch(cont){
 80003b8:	4b3b      	ldr	r3, [pc, #236]	; (80004a8 <main+0x1ec>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	3b01      	subs	r3, #1
 80003be:	2b08      	cmp	r3, #8
 80003c0:	d83b      	bhi.n	800043a <main+0x17e>
 80003c2:	a201      	add	r2, pc, #4	; (adr r2, 80003c8 <main+0x10c>)
 80003c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c8:	080003ed 	.word	0x080003ed
 80003cc:	080003f5 	.word	0x080003f5
 80003d0:	080003fd 	.word	0x080003fd
 80003d4:	08000405 	.word	0x08000405
 80003d8:	0800040d 	.word	0x0800040d
 80003dc:	08000415 	.word	0x08000415
 80003e0:	0800041d 	.word	0x0800041d
 80003e4:	08000425 	.word	0x08000425
 80003e8:	0800042d 	.word	0x0800042d
						case 1:
							ligaLed(0);
 80003ec:	2000      	movs	r0, #0
 80003ee:	f7ff ff09 	bl	8000204 <ligaLed>
							break;
 80003f2:	e022      	b.n	800043a <main+0x17e>
						case 2:
							ligaLed(1);
 80003f4:	2001      	movs	r0, #1
 80003f6:	f7ff ff05 	bl	8000204 <ligaLed>
							break;
 80003fa:	e01e      	b.n	800043a <main+0x17e>
						case 3:
							ligaLed(2);
 80003fc:	2002      	movs	r0, #2
 80003fe:	f7ff ff01 	bl	8000204 <ligaLed>
							break;
 8000402:	e01a      	b.n	800043a <main+0x17e>
						case 4:
							ligaLed(3);
 8000404:	2003      	movs	r0, #3
 8000406:	f7ff fefd 	bl	8000204 <ligaLed>
							break;
 800040a:	e016      	b.n	800043a <main+0x17e>
						case 5:
							ligaLed(4);
 800040c:	2004      	movs	r0, #4
 800040e:	f7ff fef9 	bl	8000204 <ligaLed>
							break;
 8000412:	e012      	b.n	800043a <main+0x17e>
						case 6:
							ligaLed(5);
 8000414:	2005      	movs	r0, #5
 8000416:	f7ff fef5 	bl	8000204 <ligaLed>
							break;
 800041a:	e00e      	b.n	800043a <main+0x17e>
						case 7:
							ligaLed(6);
 800041c:	2006      	movs	r0, #6
 800041e:	f7ff fef1 	bl	8000204 <ligaLed>
							break;
 8000422:	e00a      	b.n	800043a <main+0x17e>
						case 8:
							ligaLed(7);
 8000424:	2007      	movs	r0, #7
 8000426:	f7ff feed 	bl	8000204 <ligaLed>
							break;
 800042a:	e006      	b.n	800043a <main+0x17e>
						case 9:
							GPIOA->ODR |= 0x20;
 800042c:	4a15      	ldr	r2, [pc, #84]	; (8000484 <main+0x1c8>)
 800042e:	4b15      	ldr	r3, [pc, #84]	; (8000484 <main+0x1c8>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	f043 0320 	orr.w	r3, r3, #32
 8000436:	6153      	str	r3, [r2, #20]
							break;
 8000438:	bf00      	nop
						}
						TIM11->SR &= ~0b1;
 800043a:	4a15      	ldr	r2, [pc, #84]	; (8000490 <main+0x1d4>)
 800043c:	4b14      	ldr	r3, [pc, #80]	; (8000490 <main+0x1d4>)
 800043e:	691b      	ldr	r3, [r3, #16]
 8000440:	f023 0301 	bic.w	r3, r3, #1
 8000444:	6113      	str	r3, [r2, #16]
					if(TIM11->SR & 0x1){
 8000446:	e01a      	b.n	800047e <main+0x1c2>
					}
			}
			else if(contando == 0){
 8000448:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <main+0x1e4>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2b00      	cmp	r3, #0
 800044e:	f47f af7f 	bne.w	8000350 <main+0x94>
				if(TIM11->SR & 0x1){
 8000452:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <main+0x1d4>)
 8000454:	691b      	ldr	r3, [r3, #16]
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	2b00      	cmp	r3, #0
 800045c:	f43f af78 	beq.w	8000350 <main+0x94>
					GPIOC->ODR ^= 0b11111111;
 8000460:	4a09      	ldr	r2, [pc, #36]	; (8000488 <main+0x1cc>)
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <main+0x1cc>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 800046a:	6153      	str	r3, [r2, #20]
					verif = 1;
 800046c:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <main+0x1e8>)
 800046e:	2201      	movs	r2, #1
 8000470:	601a      	str	r2, [r3, #0]
					TIM11->SR &= ~0b1;
 8000472:	4a07      	ldr	r2, [pc, #28]	; (8000490 <main+0x1d4>)
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <main+0x1d4>)
 8000476:	691b      	ldr	r3, [r3, #16]
 8000478:	f023 0301 	bic.w	r3, r3, #1
 800047c:	6113      	str	r3, [r2, #16]
	chaveStart = GPIOB->IDR & 0b10;
 800047e:	e767      	b.n	8000350 <main+0x94>
 8000480:	40023800 	.word	0x40023800
 8000484:	40020000 	.word	0x40020000
 8000488:	40020800 	.word	0x40020800
 800048c:	40020400 	.word	0x40020400
 8000490:	40014800 	.word	0x40014800
 8000494:	40014400 	.word	0x40014400
 8000498:	20000070 	.word	0x20000070
 800049c:	2000006c 	.word	0x2000006c
 80004a0:	20000060 	.word	0x20000060
 80004a4:	20000068 	.word	0x20000068
 80004a8:	20000064 	.word	0x20000064

080004ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80004ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80004b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80004b2:	e003      	b.n	80004bc <LoopCopyDataInit>

080004b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80004b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80004b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80004ba:	3104      	adds	r1, #4

080004bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80004bc:	480b      	ldr	r0, [pc, #44]	; (80004ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80004be:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80004c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80004c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80004c4:	d3f6      	bcc.n	80004b4 <CopyDataInit>
  ldr  r2, =_sbss
 80004c6:	4a0b      	ldr	r2, [pc, #44]	; (80004f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80004c8:	e002      	b.n	80004d0 <LoopFillZerobss>

080004ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80004ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80004cc:	f842 3b04 	str.w	r3, [r2], #4

080004d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80004d0:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80004d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80004d4:	d3f9      	bcc.n	80004ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80004d6:	f000 f813 	bl	8000500 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004da:	f000 f847 	bl	800056c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004de:	f7ff feed 	bl	80002bc <main>
  bx  lr    
 80004e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80004e4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80004e8:	080005d4 	.word	0x080005d4
  ldr  r0, =_sdata
 80004ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80004f0:	20000040 	.word	0x20000040
  ldr  r2, =_sbss
 80004f4:	20000040 	.word	0x20000040
  ldr  r3, = _ebss
 80004f8:	20000074 	.word	0x20000074

080004fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004fc:	e7fe      	b.n	80004fc <ADC_IRQHandler>
	...

08000500 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000504:	4a16      	ldr	r2, [pc, #88]	; (8000560 <SystemInit+0x60>)
 8000506:	4b16      	ldr	r3, [pc, #88]	; (8000560 <SystemInit+0x60>)
 8000508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800050c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000510:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000514:	4a13      	ldr	r2, [pc, #76]	; (8000564 <SystemInit+0x64>)
 8000516:	4b13      	ldr	r3, [pc, #76]	; (8000564 <SystemInit+0x64>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f043 0301 	orr.w	r3, r3, #1
 800051e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000520:	4b10      	ldr	r3, [pc, #64]	; (8000564 <SystemInit+0x64>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000526:	4a0f      	ldr	r2, [pc, #60]	; (8000564 <SystemInit+0x64>)
 8000528:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <SystemInit+0x64>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000534:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <SystemInit+0x64>)
 8000538:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <SystemInit+0x68>)
 800053a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800053c:	4a09      	ldr	r2, [pc, #36]	; (8000564 <SystemInit+0x64>)
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <SystemInit+0x64>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000546:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <SystemInit+0x64>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800054e:	4b04      	ldr	r3, [pc, #16]	; (8000560 <SystemInit+0x60>)
 8000550:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000554:	609a      	str	r2, [r3, #8]
#endif
}
 8000556:	bf00      	nop
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	e000ed00 	.word	0xe000ed00
 8000564:	40023800 	.word	0x40023800
 8000568:	24003010 	.word	0x24003010

0800056c <__libc_init_array>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	4e0d      	ldr	r6, [pc, #52]	; (80005a4 <__libc_init_array+0x38>)
 8000570:	4c0d      	ldr	r4, [pc, #52]	; (80005a8 <__libc_init_array+0x3c>)
 8000572:	1ba4      	subs	r4, r4, r6
 8000574:	10a4      	asrs	r4, r4, #2
 8000576:	2500      	movs	r5, #0
 8000578:	42a5      	cmp	r5, r4
 800057a:	d109      	bne.n	8000590 <__libc_init_array+0x24>
 800057c:	4e0b      	ldr	r6, [pc, #44]	; (80005ac <__libc_init_array+0x40>)
 800057e:	4c0c      	ldr	r4, [pc, #48]	; (80005b0 <__libc_init_array+0x44>)
 8000580:	f000 f818 	bl	80005b4 <_init>
 8000584:	1ba4      	subs	r4, r4, r6
 8000586:	10a4      	asrs	r4, r4, #2
 8000588:	2500      	movs	r5, #0
 800058a:	42a5      	cmp	r5, r4
 800058c:	d105      	bne.n	800059a <__libc_init_array+0x2e>
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000594:	4798      	blx	r3
 8000596:	3501      	adds	r5, #1
 8000598:	e7ee      	b.n	8000578 <__libc_init_array+0xc>
 800059a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800059e:	4798      	blx	r3
 80005a0:	3501      	adds	r5, #1
 80005a2:	e7f2      	b.n	800058a <__libc_init_array+0x1e>
 80005a4:	080005cc 	.word	0x080005cc
 80005a8:	080005cc 	.word	0x080005cc
 80005ac:	080005cc 	.word	0x080005cc
 80005b0:	080005d0 	.word	0x080005d0

080005b4 <_init>:
 80005b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005b6:	bf00      	nop
 80005b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ba:	bc08      	pop	{r3}
 80005bc:	469e      	mov	lr, r3
 80005be:	4770      	bx	lr

080005c0 <_fini>:
 80005c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005c2:	bf00      	nop
 80005c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005c6:	bc08      	pop	{r3}
 80005c8:	469e      	mov	lr, r3
 80005ca:	4770      	bx	lr
